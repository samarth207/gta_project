{"version":3,"sources":["components/navbar.js","components/home.js","components/visualiser.js","components/algo.js","components/finder.js","components/covid.js","App.js","components/game.js","index.js"],"names":["Header","Navbar","className","collapseOnSelect","expand","style","borderBottom","height","Brand","href","color","fontSize","fontWeight","Toggle","aria-controls","Collapse","id","Nav","Link","eventKey","Component","Home","state","errors","minHeight","Visualiser","sleep","Promise","resolve","setTimeout","speed","BFS","x","graph","check","a","q","push","length","k","shift","i","node","setState","edges","map","item","index","v","u","vertices","DFS","pop","GraphColouring","result","total_nodes","assigned","j","colorind","mark","root","PrimMST","sz","weight","temp","root1","root2","Dijkstra","distance","par","done","cnt","splice","total_edges","starting_node","ending_node","isWeighted","width","algorithm","count","onChangeNodes","bind","onChangeEdges","OnSimulate","e","nodes","target","value","this","name","data","node_data","Math","floor","random","y","alert","set","Set","num1","num2","str1","toString","str2","has","add","weight_edge","check_weighted","parseInt","preventDefault","inputCss","border","boxShadow","borderRadius","position","textAlign","paddingLeft","paddingTop","type","required","onChange","onChangeWeighted","min","max","onChangeStartingNode","onChangeEndingNode","disabled","backgroundColor","onClick","window","location","reload","marginTop","left","x1","y1","x2","y2","stroke","strokeWidth","zIndex","fill","cx","cy","r","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","Finder","grid","mouseIsPressed","start_node_row","start_node_col","finish_node_row","finish_node_col","dist","clearBoard","row","currentRow","col","isVisited","isWall","isStart","isFinish","Infinity","cord","c","newGrid","slice","newNode","visitedNodesInOrder","animateShortestPath","document","getElementById","startNode","unvisitedNodes","closestNode","bfs","animate","dfs","sort","nodeA","nodeB","dijkstra","padding","display","marginLeft","top","rowIdx","nodeIdx","extraClassName","onMouseEnter","createWall","onMouseDown","onMouseUp","Covid","active_nodes","gamma","beta","updateVertices","timer","setInterval","startInterval","clearInterval","randm","jump1","jump2","updateEdges","abs","prob","edge","onChangeActive","paddingRight","float","App","exact","path","component","PureComponent","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1f01dfed.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <Navbar\r\n        className=\"px-2\"\r\n        collapseOnSelect\r\n        expand=\"lg\"\r\n        style={{\r\n          borderBottom: \"2px solid #e6f7dc\",\r\n          height: \"50px\",\r\n        }}\r\n      >\r\n        <Navbar.Brand href=\"/\">\r\n          <span\r\n            style={{\r\n              color: \"#6FA843\",\r\n              fontSize: \"20px\",\r\n              fontWeight: \"500\",\r\n            }}\r\n          >\r\n            GTA-Simulator\r\n          </span>\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse\r\n          id=\"responsive-navbar-nav\"\r\n          style={{ fontWeight: \"600\" }}\r\n        >\r\n          <Nav className=\"mr-auto\"></Nav>\r\n          <Nav>\r\n            <Nav.Link eventKey={1} href=\"/visualiser\">\r\n              Algo Visualiser\r\n            </Nav.Link>\r\n            <Nav.Link eventKey={2} href=\"/path_finder\">\r\n              Path Finder\r\n            </Nav.Link>\r\n            {/* <Nav.Link eventKey={2} href='/game_coloring'>Coloring Game</Nav.Link>                  */}\r\n            <Nav.Link eventKey={3} href=\"/covid_simulation\">\r\n              Covid Simulation\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      errors: {},\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"d-flex flex-column justify-content-center\"\r\n          style={{ minHeight: \"90vh\" }}\r\n        >\r\n          <div className=\"d-flex flex-row justify-content-center\">\r\n            <h1 style={{ fontWeight: \"700\", fontSize: \"80px\" }}>Welcome</h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import React, { Component } from 'react'\r\n\r\nclass Visualiser extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            total_nodes: '',\r\n            total_edges: '',\r\n            starting_node: '',\r\n            ending_node : '',\r\n            isWeighted: false,\r\n            vertices: [],\r\n            edges: [],\r\n            graph: [],\r\n            height: 550,\r\n            width: 1000,\r\n            algorithm: '',\r\n            speed: 3000,\r\n            count: 0,\r\n            id : [],\r\n            errors: {},\r\n        }\r\n        this.onChangeNodes = this.onChangeNodes.bind(this)\r\n        this.onChangeEdges = this.onChangeEdges.bind(this)\r\n        this.OnSimulate = this.OnSimulate.bind(this)\r\n        this.sleep = this.sleep.bind(this)\r\n    }\r\n\r\n    onChangeNodes(e) {\r\n        var nodes = e.target.value\r\n        this.setState({ [e.target.name]: nodes })\r\n        var data = []\r\n        for (var i = 0; i < nodes; i++) {\r\n            var num1 = Math.floor(Math.random() * this.state.width) + 50\r\n            var num2 = Math.floor(Math.random() * this.state.height) + 50\r\n            var node_data = {\r\n                x: num1,\r\n                y: num2,\r\n                color: \"blue\"\r\n            }\r\n            data.push(node_data)\r\n        }\r\n        this.setState({ vertices: data })\r\n    }\r\n\r\n    onChangeEdges(e) {\r\n\r\n        var total_edges = e.target.value\r\n        var nodes = this.state.total_nodes\r\n        if (2 * total_edges > (nodes * (nodes - 1))) {\r\n            alert('Edges can not be greater than (n * n+1) / 2')\r\n            return;\r\n        }\r\n\r\n        this.setState({ [e.target.name]: total_edges })\r\n        var set = new Set()\r\n\r\n        var edges = []\r\n        var data = []\r\n        for (var j = 0; j < this.state.total_nodes; j++) {\r\n            data.push([])\r\n        }\r\n\r\n        for (var i = 0; i < total_edges; i++) {\r\n\r\n            var num1 = Math.floor(Math.random() * this.state.total_nodes)\r\n            var num2 = Math.floor(Math.random() * this.state.total_nodes)\r\n\r\n            var str1 = num1.toString() + '#' + num2.toString()\r\n            var str2 = num2.toString() + '#' + num1.toString()\r\n\r\n            if (set.has(str1) || set.has(str2) || num1 === num2) {\r\n                i -= 1\r\n            }\r\n            else {\r\n                set.add(str1)\r\n                var weight_edge = Math.floor(Math.random() * 100)\r\n                data[num1].push({ node : num2, weight : weight_edge })\r\n                data[num2].push({ node : num1, weight: weight_edge })\r\n                edges.push({\r\n                    u: num1,\r\n                    v: num2,\r\n                    weight: weight_edge,\r\n                    color: \"yellow\"\r\n                })\r\n            }\r\n        }\r\n        this.setState({ edges: edges })\r\n        this.setState({ graph: data })\r\n    }\r\n\r\n    onChangeWeighted(e) {\r\n        var check_weighted = e.target.value === \"true\" ? true : false\r\n        this.setState({ isWeighted: check_weighted })\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    onChangeStartingNode(e) {\r\n        var node = e.target.value;\r\n        node = parseInt(node)\r\n        if (node >= this.state.vertices.length || node < 0) {\r\n            alert('starting node should be between 0 to n');\r\n            return;\r\n        }\r\n        else if (node < this.state.vertices.length && node >= 0) {\r\n            this.setState(state => {\r\n                return state.vertices.map((item, index) => {\r\n                    if (node === index) {\r\n                        item.color = \"black\"\r\n                        return item;\r\n                    } else {\r\n                        item.color = \"blue\"\r\n                        return item;\r\n                    }\r\n                });\r\n            });\r\n            this.setState({ starting_node: node })\r\n        }\r\n\r\n    }\r\n\r\n    onChangeEndingNode(e) {\r\n        var node = e.target.value;\r\n        node = parseInt(node)\r\n        if (node >= this.state.vertices.length || node < 0) {\r\n            alert('ending node should be between 0 to n');\r\n            return;\r\n        }\r\n        else if (node < this.state.vertices.length && node >= 0) {\r\n            this.setState(state => {\r\n                return state.vertices.map((item, index) => {\r\n                    if(item.color === \"black\"){\r\n                        return item\r\n                    }\r\n                    else if (index === node) {\r\n                        item.color = \"brown\"\r\n                        return item;\r\n                    } else {\r\n                        item.color = \"blue\"\r\n                        return item;\r\n                    }\r\n                });\r\n            });\r\n            this.setState({ starting_node: node })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    OnSimulate(e) {\r\n        e.preventDefault()\r\n\r\n        if (this.state.algorithm === \"bfs\") {\r\n            var graph = this.state.graph;\r\n            var check = [];\r\n            for (var i = 0; i < graph.length; i++) {\r\n                check.push(false)\r\n            }\r\n            this.BFS(this.state.starting_node, this.state.graph, check)\r\n        }\r\n\r\n        if (this.state.algorithm === \"dfs\") {\r\n            var graph = this.state.graph;\r\n            var check = [];\r\n            for (var i = 0; i < graph.length; i++) {\r\n                check.push(false)\r\n            }\r\n            this.DFS(this.state.starting_node, this.state.graph, check)\r\n        }\r\n\r\n        if (this.state.algorithm === \"mst\") {\r\n            this.PrimMST()\r\n        }\r\n\r\n        if (this.state.algorithm === \"dijkstra\") {\r\n            var graph = this.state.graph;\r\n            var check = [];\r\n            for (var i = 0; i < graph.length; i++) {\r\n                check.push(false)\r\n            }\r\n            this.Dijkstra(this.state.starting_node, this.state.graph, check)\r\n        }\r\n\r\n        if (this.state.algorithm === \"coloring\") {\r\n            var graph = this.state.graph;\r\n            this.GraphColouring(graph)\r\n        }\r\n    }\r\n\r\n    sleep = () => {\r\n        return new Promise(resolve => setTimeout(resolve, this.state.speed))\r\n    }\r\n\r\n    BFS = async (x, graph, check) => {\r\n        var q = [];\r\n        q.push(x);\r\n        check[x] = true\r\n        while (q.length > 0) {\r\n            var k = q.shift()\r\n            for (var i = 0; i < graph[k].length; i++) {\r\n                if (!check[graph[k][i].node]) {\r\n                    await this.setState(state => {\r\n                        return state.edges.map((item, index) => {\r\n                            if ((item.v === k && item.u === graph[k][i].node) || (item.u === k && item.v === graph[k][i].node)) {\r\n                                item.color = \"#e35417\"\r\n                                return item;\r\n                            } else {\r\n                                return item;\r\n                            }\r\n                        });\r\n                    });\r\n                    await this.setState(state => {\r\n                        return state.vertices.map((item, index) => {\r\n                            if (graph[k][i].node === index && item.color !== \"black\") {\r\n                                item.color = \"green\"\r\n                                return item;\r\n                            } else {\r\n                                return item;\r\n                            }\r\n                        });\r\n                    });\r\n                    await this.sleep()\r\n                    check[graph[k][i].node] = true;\r\n                    q.push(graph[k][i].node);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    DFS = async (x, graph, check) => {\r\n        var q = [];\r\n        q.push(x);\r\n        check[x] = true\r\n        while (q.length > 0) {\r\n            var k = q.pop()\r\n            await this.setState(state => {\r\n                return state.edges.map((item) => {\r\n                    if ((item.v === k && item.u === x) || (item.v === x && item.u === k)) {\r\n                        item.color = \"#e35417\"\r\n                        return item;\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                });\r\n            });\r\n            await this.setState(state => {\r\n                return state.vertices.map((item, index) => {\r\n                    if (k === index && item.color !== \"black\") {\r\n                        item.color = \"green\"\r\n                        return item;\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                });\r\n            });\r\n            await this.sleep()\r\n            for (var i = 0; i < graph[k].length; i++) {\r\n                if (!check[graph[k][i].node]) {\r\n                    check[graph[k][i].node] = true;\r\n                    q.push(graph[k][i].node);\r\n                }\r\n            }\r\n            x=k\r\n        }\r\n    }\r\n\r\n    GraphColouring = async (graph) => {\r\n        var color = [\"CYAN\", \"GREEN\", \"RED\", \"YELLOW\", \"ORANGE\", \"PINK\", \"BLACK\", \"BROWN\", \"PURPLE\", \"VOILET\"]\r\n        var result = {};\r\n        for (var i = 0; i < this.state.total_nodes; i++) {\r\n            result[i] = \"BLUE\"\r\n        }\r\n        for (var i = 0; i < this.state.total_nodes; i++) {\r\n            var assigned = [];\r\n            for (var j = 0; j < this.state.graph[i].length; j++) {\r\n                if (result[graph[i][j]] != \"BLUE\") {\r\n                    assigned.push(result[graph[i][j].node]);\r\n                }\r\n            }\r\n            var colorind = 0;\r\n            for (var j = 0; j < color.length; j++) {\r\n                var mark = 0;\r\n                for (var k = 0; k < assigned.length; k++) {\r\n                    if (color[j] == assigned[k]) {\r\n                        mark = 1;\r\n                    }\r\n                }\r\n                if (mark == 0) {\r\n                    colorind = j;\r\n                    break;\r\n                }\r\n            }\r\n            result[i] = color[colorind];\r\n            await this.setState(state => {\r\n                return state.vertices.map((item, index) => {\r\n                    item.color = result[index]\r\n                    return item;\r\n                });\r\n            });\r\n            await this.sleep()\r\n        }\r\n    }\r\n\r\n    root = (x) => {\r\n        var id = this.state.id \r\n        while (id[x] != x) {\r\n            id[x] = id[id[x]];\r\n            x = id[x];\r\n        }\r\n        this.setState({id : id})\r\n        return x;\r\n    }\r\n\r\n\r\n    PrimMST = async () => {\r\n\r\n        var edges = this.state.edges\r\n        var sz = this.state.vertices.length\r\n\r\n        var id = [];\r\n        for (var i = 0; i < sz; i++) {\r\n            id.push(i);\r\n        }\r\n        await this.setState({ id: id })\r\n\r\n        for (var i = 0; i < edges.length - 1; i++) {\r\n            for (var j = i + 1; j < edges.length; j++) {\r\n                if (edges[i].weight > edges[j].weight) {\r\n                    var temp = edges[i]\r\n                    edges[i] = edges[j]\r\n                    edges[j] = temp\r\n                }\r\n            }\r\n\r\n        }\r\n        \r\n\r\n        for (var i = 0; i < edges.length ; i++) {\r\n\r\n            if(i===edges.length - 1){\r\n                await this.setState(state => {\r\n                    return state.edges.map((item, index) => {\r\n                        if (item.color === \"yellow\") {\r\n                            item.color = \"white\"\r\n                            item.weight = ''\r\n                            return item;\r\n                        }\r\n                        else\r\n                            return item\r\n                    });\r\n                });\r\n                return;\r\n            }\r\n            var root1 = await this.root(edges[i].u) \r\n            var root2 = await this.root(edges[i].v)\r\n            \r\n            if (root1 != root2) {\r\n                var id = this.state.id\r\n                id[root1] = id[root2];\r\n                await this.setState({ id: id })\r\n                await this.setState(state => {\r\n                    return state.edges.map((item, index) => {\r\n                        if (item.u == edges[i].u && item.v == edges[i].v) {\r\n                            item.color = \"#e35417\"\r\n                            return item;\r\n                        }\r\n                        else {\r\n                            return item;\r\n                        }\r\n\r\n                    });\r\n                });\r\n                \r\n                await this.sleep()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    Dijkstra = async (x, graph, check) => {\r\n        \r\n        var distance = [];\r\n        var par = []\r\n        var done = []\r\n        for (var i = 0; i <= this.state.total_nodes; i++) {\r\n            distance[i] = 1000;\r\n            par[i] = -1\r\n            done[i] = false\r\n        }\r\n        distance[x] = 0;\r\n\r\n        var q = []\r\n        q.push(x)\r\n        check[x] = true\r\n        var d = 5\r\n        while (true) {\r\n            d -= 1\r\n            var k = q[0]\r\n            var cnt = 0\r\n            for (var j = 0; j < q.length; j++) {\r\n                if (!done[q[j]]) cnt += 1\r\n                if ((distance[q[j]] < distance[k]) && (!done[q[j]])) k = q[j]\r\n            }\r\n            if (cnt === 0) break\r\n            done[k] = true\r\n            for (var j = 0; j < q.length; j++) {\r\n                if (q[j] === k) q.splice(j, 1)\r\n            }\r\n            \r\n            this.setState(state => {\r\n                return state.vertices.map((item, index) => {\r\n                    if (k === index && item.color !== \"black\") {\r\n                        item.color = \"green\"\r\n                        return item;\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                });\r\n            });\r\n            \r\n            for (var i = 0; i < graph[k].length; i++) {\r\n                if (!check[graph[k][i].node]) {\r\n                    check[graph[k][i].node] = true\r\n                    q.push(graph[k][i].node)\r\n                }\r\n                if (!done[graph[k][i].node]) {\r\n                    if (distance[k] + graph[k][i].weight < distance[graph[k][i].node]) {\r\n                        distance[graph[k][i].node] = distance[k] + graph[k][i].weight \r\n                        await this.setState(state => {\r\n                            return state.edges.map((item, index) => {\r\n                                if ((item.v === par[graph[k][i].node] && item.u === graph[k][i].node) || (item.u === par[graph[k][i].node] && item.v === graph[k][i].node)) {\r\n                                    item.color = \"yellow\"\r\n                                    return item;\r\n                                } else {\r\n                                    return item;\r\n                                }\r\n                            });\r\n                        });\r\n                        par[graph[k][i].node] = k\r\n                        await this.setState(state => {\r\n                            return state.edges.map((item, index) => {\r\n                                if ((item.v === par[graph[k][i].node] && item.u === graph[k][i].node) || (item.u === par[graph[k][i].node] && item.v === graph[k][i].node)) {\r\n                                    item.color = \"#e35417\"\r\n                                    return item;\r\n                                } else {\r\n                                    return item;\r\n                                }\r\n                            });\r\n                        });\r\n                        await this.sleep()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const parameterCss = {\r\n            height: \"90vh\",\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            borderRadius: \"10px\",\r\n            position: \"fixed\",\r\n            width: \"25%\"\r\n        }\r\n\r\n\r\n        const simulatorCss = {\r\n            minHeight: \"91vh\",\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            borderRadius: \"10px\",\r\n            left: \"27%\",\r\n            width: \"72%\",\r\n            position: \"fixed\"\r\n        }\r\n\r\n        const inputCss = {\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            height: \"30px\",\r\n            width: \"75%\",\r\n            fontSize: \"12px\"\r\n        }\r\n\r\n        const { vertices } = this.state\r\n\r\n        return (\r\n            <div className=\"visualiser my-2 ml-3\">\r\n                <div className=\"parameter\" style={parameterCss}>\r\n                    <div style={{ color: \"#a2c48d\", fontSize: \"22px\", textAlign: \"center\" }}>\r\n                        Input parameters\r\n                    </div>\r\n                    <div style={{ color: \"#996560\", fontSize: \"17px\", fontWeight: \"600\", paddingLeft: \"25px\", paddingTop : \"20px\" }}>\r\n                        <div className=\"form-group\" >\r\n                            Total number of nodes\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"total_nodes\"\r\n                                required\r\n                                value={this.state.total_nodes}\r\n                                onChange={this.onChangeNodes}\r\n                                style={inputCss}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label >Total number of edges</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"total_edges\"\r\n                                required\r\n                                value={this.state.total_edges}\r\n                                onChange={this.onChangeEdges}\r\n                                style={inputCss}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            Weighted Graph\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"isWeighted\"\r\n                                required\r\n                                value={this.state.isWeighted}\r\n                                onChange={(e) => this.onChangeWeighted(e)}\r\n                                style={inputCss}\r\n                            >\r\n                                <option value={false}>No</option>\r\n                                <option value={true}>Yes</option>\r\n\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\" >\r\n                            Starting node\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"starting_node\"\r\n                                required\r\n                                value={this.starting_node}\r\n                                min=\"0\"\r\n                                max={vertices.length - 1}\r\n                                onChange={(e) => this.onChangeStartingNode(e)}\r\n                                style={inputCss}\r\n                            />\r\n                        </div>\r\n\r\n\r\n                        <div className=\"form-group\" >\r\n                            Ending node\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"ending_node\"\r\n                                required\r\n                                value={this.ending_node}\r\n                                min=\"0\"\r\n                                max={vertices.length - 1}\r\n                                onChange={(e) => this.onChangeEndingNode(e)}\r\n                                style={inputCss}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            Algorithm\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"algorithm\"\r\n                                required\r\n                                value={this.state.algorithm}\r\n                                onChange={(e) => this.onChange(e)}\r\n                                style={inputCss}\r\n                            >\r\n                                <option value='' disabled>Select..</option>\r\n                                <option value='dfs'>DFS</option>\r\n                                <option value='bfs'>BFS</option>\r\n                                <option value='mst'>MST</option>\r\n                                <option value='dijkstra'>Dijkstra</option>\r\n                                <option value='coloring'>Graph coloring</option>\r\n                            </select>\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"btn\" style={{\r\n                                backgroundColor: \"#fff1f0\",\r\n                                color: \"black\",\r\n                                width: \"75%\",\r\n                                fontSize: \"13px\",\r\n                                height: \"30px\",\r\n\r\n                            }}\r\n                                onClick={() => window.location.reload()}\r\n                            >\r\n                                Clear board\r\n                            </button>\r\n                        </div>\r\n                        <div>\r\n\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"btn\" style={{\r\n                                backgroundColor: \"#effce8\",\r\n                                color: \"black\",\r\n                                width: \"90%\",\r\n                                borderRadius: \"0px 20px 20px 0px\",\r\n                                marginTop: \"20px\"\r\n                            }}\r\n                                onClick = {this.OnSimulate}\r\n                            >\r\n                                Simulate\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"simulator\" style={simulatorCss}>\r\n                    <div style={{ color: \"#a2c48d\", fontSize: \"25px\", textAlign: \"center\" }}>\r\n                        Siumlation\r\n                    </div>\r\n                    <svg width=\"100%\" height=\"80vh\">\r\n\r\n                        {this.state.edges ? (\r\n                            this.state.edges.map((data, index) => (\r\n                                <line key={`\"edge\"${index}`} x1={vertices[data.v].x} y1={vertices[data.v].y} x2={vertices[data.u].x} y2={vertices[data.u].y}\r\n                                    style={{ stroke: data.color, strokeWidth: 4, zIndex: 1 }}\r\n                                />\r\n                            ))\r\n                        ) : ''}\r\n\r\n                        {this.state.isWeighted ? (\r\n                            this.state.edges.map((data, index) => (\r\n                                <text key={`\"weight\"${index}`}  x={(vertices[data.v].x + vertices[data.u].x) / 2} y={(vertices[data.v].y + vertices[data.u].y) / 2} fill=\"red\" style={{ fontWeight : \"bold\",fontSize: \"14px\" }}>\r\n                                    {data.weight}\r\n                                </text>\r\n                            ))\r\n                        ) : ''}\r\n\r\n                        {vertices ? (\r\n                            vertices.map((data, index) => (\r\n                                <circle className=\"circle\" key={`\"node\"${index}`} cx={data.x} cy={data.y}\r\n                                    r=\"17\" fill={data.color}\r\n                                />\r\n\r\n                            ))\r\n                        ) : ''}\r\n\r\n                        {vertices ? (\r\n                            vertices.map((data, index) => (\r\n                                <text key={`\"text\"${index}`} x={data.x - 7} y={data.y + 8} fill=\"white\" style={{ fontWeight: \"bold\", fontSize: \"20px\" }}>\r\n                                    {index}\r\n                                </text>\r\n                            ))\r\n                        ) : ''}\r\n\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Visualiser;","\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = [];\r\n\r\n    for (var row of grid) {\r\n        for (var node of row) {\r\n            unvisitedNodes.push(node);\r\n        }\r\n    }\r\n\r\n    while (!!unvisitedNodes.length) {\r\n\r\n        unvisitedNodes.sort((nodeA, nodeB) => nodeB.distance - nodeA.distance)\r\n        var closestNode = unvisitedNodes.pop();\r\n\r\n        if (closestNode.isWall)\r\n            continue;\r\n\r\n        if (closestNode.distance === Infinity)\r\n            return visitedNodesInOrder;\r\n\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if (closestNode === finishNode)\r\n            return visitedNodesInOrder;\r\n\r\n\r\n        closestNode.isVisited = true;\r\n\r\n        const { row, col } = closestNode\r\n\r\n        if (row > 0 && !grid[row - 1][col].isVisited ) {\r\n            grid[row - 1][col].distance = closestNode.distance + 1;\r\n            grid[row - 1][col].previousNode = closestNode;\r\n        }\r\n        if (row < grid.length - 1 && !grid[row + 1][col].isVisited) {\r\n            grid[row + 1][col].distance = closestNode.distance + 1;\r\n            grid[row + 1][col].previousNode = closestNode;\r\n        }\r\n        if (col > 0 && !grid[row][col - 1].isVisited) {\r\n            grid[row][col - 1].distance = closestNode.distance + 1;\r\n            grid[row][col - 1].previousNode = closestNode;\r\n        }\r\n        if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) {\r\n            grid[row][col + 1].distance = closestNode.distance + 1;\r\n            grid[row][col + 1].previousNode = closestNode;\r\n        }\r\n    }\r\n}\r\n\r\nexport function bfs(grid, startNode, finishNode) {\r\n\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = [];\r\n\r\n    unvisitedNodes.push(startNode)\r\n\r\n    while (!!unvisitedNodes.length) {\r\n\r\n        var closestNode = unvisitedNodes.shift();\r\n\r\n        if (closestNode.isWall)\r\n            continue;\r\n\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if (closestNode === finishNode)\r\n            return visitedNodesInOrder;\r\n\r\n        closestNode.isVisited = true;\r\n\r\n        const { row, col } = closestNode\r\n\r\n        if (row > 0 && !grid[row - 1][col].isVisited) {\r\n            grid[row - 1][col].isVisited = true\r\n            grid[row - 1][col].distance = closestNode.distance + 1;\r\n            grid[row - 1][col].previousNode = closestNode;\r\n            unvisitedNodes.push(grid[row - 1][col])\r\n        }\r\n        if (row < grid.length - 1 && !grid[row + 1][col].isVisited) {\r\n            grid[row + 1][col].isVisited = true\r\n            grid[row + 1][col].distance = closestNode.distance + 1;\r\n            grid[row + 1][col].previousNode = closestNode;\r\n            unvisitedNodes.push(grid[row + 1][col])\r\n        }\r\n        if (col > 0 && !grid[row][col - 1].isVisited) {\r\n            grid[row][col - 1].isVisited = true\r\n            grid[row][col - 1].distance = closestNode.distance + 1;\r\n            grid[row][col - 1].previousNode = closestNode;\r\n            unvisitedNodes.push(grid[row][col - 1])\r\n        }\r\n        if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) {\r\n            grid[row][col + 1].isVisited = true\r\n            grid[row][col + 1].distance = closestNode.distance + 1;\r\n            grid[row][col + 1].previousNode = closestNode;\r\n            unvisitedNodes.push(grid[row][col + 1])\r\n        }\r\n    }\r\n}\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n\r\n    const visitedNodesInOrder = [];\r\n\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = [];\r\n\r\n    unvisitedNodes.push(startNode)\r\n\r\n    while (!!unvisitedNodes.length) {\r\n\r\n        var closestNode = unvisitedNodes.pop();\r\n\r\n        if (closestNode.isWall)\r\n            continue;\r\n\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if (closestNode === finishNode)\r\n            return visitedNodesInOrder;\r\n\r\n        closestNode.isVisited = true;\r\n\r\n        const { row, col } = closestNode\r\n\r\n        if (row > 0 && !grid[row - 1][col].isVisited) {\r\n            grid[row - 1][col].isVisited = true\r\n            grid[row - 1][col].distance = closestNode.distance + 1;\r\n            grid[row - 1][col].previousNode = closestNode;\r\n            unvisitedNodes.push(grid[row - 1][col])\r\n        }\r\n        if (row < grid.length - 1 && !grid[row + 1][col].isVisited) {\r\n            grid[row + 1][col].isVisited = true\r\n            grid[row + 1][col].distance = closestNode.distance + 1;\r\n            grid[row + 1][col].previousNode = closestNode;\r\n            unvisitedNodes.push(grid[row + 1][col])\r\n        }\r\n        if (col > 0 && !grid[row][col - 1].isVisited) {\r\n            grid[row][col - 1].isVisited = true\r\n            grid[row][col - 1].distance = closestNode.distance + 1;\r\n            grid[row][col - 1].previousNode = closestNode;\r\n            unvisitedNodes.push(grid[row][col - 1])\r\n        }\r\n        if (col < grid[0].length - 1 && !grid[row][col + 1].isVisited) {\r\n            grid[row][col + 1].isVisited = true\r\n            grid[row][col + 1].distance = closestNode.distance + 1;\r\n            grid[row][col + 1].previousNode = closestNode;\r\n            unvisitedNodes.push(grid[row][col + 1])\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { ThemeConsumer } from \"react-bootstrap/esm/ThemeProvider\";\r\nimport { dijkstra, getNodesInShortestPathOrder, bfs, dfs } from \"./algo\";\r\nimport \"./finder.css\";\r\n\r\nclass Finder extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      start_node_row: 0,\r\n      start_node_col: 0,\r\n      finish_node_row: 24,\r\n      finish_node_col: 40,\r\n      algorithm: \"bfs\",\r\n      dist: \"Infinity\",\r\n    };\r\n    this.OnSimulate = this.OnSimulate.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.clearBoard = this.clearBoard.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    var grid = [];\r\n    for (var row = 0; row < 25; row++) {\r\n      const currentRow = [];\r\n      for (var col = 0; col < 41; col++) {\r\n        var node = {\r\n          row: row,\r\n          col: col,\r\n          isVisited: false,\r\n          isWall: false,\r\n          isStart:\r\n            row === this.state.start_node_row &&\r\n            col === this.state.start_node_col,\r\n          isFinish:\r\n            row === this.state.finish_node_row &&\r\n            col === this.state.finish_node_col,\r\n          previousNode: null,\r\n          distance: Infinity,\r\n        };\r\n        currentRow.push(node);\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    this.setState({ grid: grid });\r\n  }\r\n\r\n  onChange(e) {\r\n    var cord = parseInt(e.target.value);\r\n    this.setState({ [e.target.name]: cord });\r\n  }\r\n\r\n  clearBoard() {\r\n    window.location.reload();\r\n  }\r\n\r\n  createWall(r, c) {\r\n    if (\r\n      this.state.mouseIsPressed === true &&\r\n      r >= 0 &&\r\n      r < 25 &&\r\n      c >= 0 &&\r\n      c < 41\r\n    ) {\r\n      var grid = this.state.grid;\r\n      var newGrid = grid.slice();\r\n      var node = newGrid[r][c];\r\n      const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall,\r\n      };\r\n      newGrid[r][c] = newNode;\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 6 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 6 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= nodesInShortestPathOrder.length; i++) {\r\n      if (i === nodesInShortestPathOrder.length) {\r\n        this.setState({ dist: nodesInShortestPathOrder[i - 1].distance });\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path\";\r\n        }, 40 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  OnSimulate() {\r\n    const { grid } = this.state;\r\n    const startNode =\r\n      grid[this.state.start_node_row][this.state.start_node_col];\r\n    const finishNode =\r\n      grid[this.state.finish_node_row][this.state.finish_node_col];\r\n    if (this.state.algorithm === \"bfs\") {\r\n      const visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n    if (this.state.algorithm === \"dfs\") {\r\n      const visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n    if (this.state.algorithm === \"dijkstra\") {\r\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n\r\n    const parameterCss = {\r\n      height: \"70vh\",\r\n      border: \"1px solid #a2c48d\",\r\n      boxShadow: \"2px 2px 3px #bfbfbf\",\r\n      borderRadius: \"10px\",\r\n      position: \"fixed\",\r\n      width: \"25%\",\r\n    };\r\n\r\n    const infoCss = {\r\n      top: \"79vh\",\r\n      height: \"20vh\",\r\n      border: \"1px solid #a2c48d\",\r\n      boxShadow: \"2px 2px 3px #bfbfbf\",\r\n      borderRadius: \"10px\",\r\n      position: \"fixed\",\r\n      width: \"25%\",\r\n    };\r\n\r\n    const simulatorCss = {\r\n      minHeight: \"91vh\",\r\n      border: \"1px solid #a2c48d\",\r\n      boxShadow: \"2px 2px 3px #bfbfbf\",\r\n      borderRadius: \"10px\",\r\n      left: \"27%\",\r\n      width: \"72%\",\r\n      position: \"fixed\",\r\n    };\r\n\r\n    const inputCss = {\r\n      border: \"1px solid #a2c48d\",\r\n      boxShadow: \"2px 2px 3px #bfbfbf\",\r\n      height: \"30px\",\r\n      width: \"75%\",\r\n      fontSize: \"13px\",\r\n    };\r\n\r\n    return (\r\n      <div className=\"finder my-2 ml-3\">\r\n        <div className=\"parameter\" style={parameterCss}>\r\n          <div\r\n            style={{\r\n              color: \"#a2c48d\",\r\n              fontSize: \"22px\",\r\n              fontWeight: \"600\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            Input parameters\r\n          </div>\r\n          <div\r\n            style={{\r\n              color: \"#996560\",\r\n              fontSize: \"15px\",\r\n              fontWeight: \"600\",\r\n              padding: \"5px 20px 0px 20px\",\r\n            }}\r\n          >\r\n            <div className=\"form-group\">\r\n              <label> Starting node (X coordinate)</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                name=\"start_node_row\"\r\n                required\r\n                value={this.state.start_node_row}\r\n                min=\"0\"\r\n                onChange={this.onChange}\r\n                style={inputCss}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Starting node (Y coordinate)</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                name=\"start_node_col\"\r\n                required\r\n                value={this.state.start_node_col}\r\n                min=\"0\"\r\n                onChange={this.onChange}\r\n                style={inputCss}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Ending node (X coordinate)</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                name=\"finish_node_row\"\r\n                required\r\n                value={this.state.finish_node_row}\r\n                min=\"0\"\r\n                onChange={this.onChange}\r\n                style={inputCss}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Ending node (Y coordinate)</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control\"\r\n                name=\"finish_node_col\"\r\n                required\r\n                value={this.state.finish_node_col}\r\n                min=\"0\"\r\n                onChange={this.onChange}\r\n                style={inputCss}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Algorithm</label>\r\n              <select\r\n                className=\"form-control\"\r\n                name=\"algorithm\"\r\n                required\r\n                value={this.state.algorithm}\r\n                onChange={(e) => this.setState({ algorithm: e.target.value })}\r\n                style={inputCss}\r\n              >\r\n                <option value=\"bfs\">BFS</option>\r\n                <option value=\"dfs\">DFS</option>\r\n                <option value=\"dijkstra\">Dijkstra</option>\r\n              </select>\r\n            </div>\r\n            <div style={{ display: \"flex\" }}>\r\n              <button\r\n                className=\"btn\"\r\n                style={{\r\n                  backgroundColor: \"#effce8\",\r\n                  color: \"black\",\r\n                  width: \"90%\",\r\n                  marginTop: \"10px\",\r\n                  borderRadius: \"20px\",\r\n                }}\r\n                onClick={this.clearBoard}\r\n              >\r\n                Clear board\r\n              </button>\r\n\r\n              <button\r\n                className=\"btn\"\r\n                style={{\r\n                  backgroundColor: \"#effce8\",\r\n                  color: \"black\",\r\n                  width: \"90%\",\r\n                  marginTop: \"10px\",\r\n                  marginLeft: \"6px\",\r\n                  borderRadius: \"20px\",\r\n                }}\r\n                onClick={this.OnSimulate}\r\n              >\r\n                Simulate\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"info\" style={infoCss}>\r\n          <div\r\n            style={{\r\n              color: \"#a2c48d\",\r\n              fontSize: \"25px\",\r\n              fontWeight: \"600\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            Result\r\n          </div>\r\n          <div\r\n            style={{\r\n              backgroundColor: \"#fff8d4\",\r\n              color: \"black\",\r\n              width: \"90%\",\r\n              marginLeft: \"10px\",\r\n              marginTop: \"15px\",\r\n              padding: \"5px\",\r\n              borderRadius: \"20px\",\r\n              fontSize: \"30px\",\r\n              color: \"#733f2c\",\r\n              fontWeight: \"bold\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            {this.state.dist}\r\n          </div>\r\n        </div>\r\n        <div className=\"simulator\" style={simulatorCss}>\r\n          <div\r\n            style={{ color: \"#a2c48d\", fontSize: \"25px\", textAlign: \"center\" }}\r\n          >\r\n            Siumlation\r\n          </div>\r\n\r\n          <div className=\"grid mx-5 my-0\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <div className=\"row\" key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const { row, col, isWall } = node;\r\n                    const extraClassName =\r\n                      row === this.state.finish_node_row &&\r\n                      col === this.state.finish_node_col\r\n                        ? \"node-finish\"\r\n                        : row === this.state.start_node_row &&\r\n                          col === this.state.start_node_col\r\n                        ? \"node-start\"\r\n                        : isWall\r\n                        ? \"node-wall\"\r\n                        : \"\";\r\n                    return (\r\n                      <div\r\n                        className={`node ${extraClassName}`}\r\n                        id={`node-${row}-${col}`}\r\n                        key={nodeIdx}\r\n                        onMouseEnter={() => this.createWall(row, col)}\r\n                        onMouseDown={() =>\r\n                          this.setState({ mouseIsPressed: true })\r\n                        }\r\n                        onMouseUp={() =>\r\n                          this.setState({ mouseIsPressed: false })\r\n                        }\r\n                      ></div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Finder;\r\n","import React, { Component } from 'react'\r\nclass Covid extends Component {\r\n    \r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            vertices: [],\r\n            edges: [],\r\n            total_nodes: '',\r\n            active_nodes: '',\r\n            count: 0,\r\n            height : 550,\r\n            width : 1000,\r\n            gamma: 1,\r\n            dist : 1000,\r\n            beta: 1\r\n        }\r\n        this.updateVertices = this.updateVertices.bind(this);\r\n        this.onChangeNodes = this.onChangeNodes.bind(this);\r\n    }\r\n\r\n    startInterval() {\r\n        this.timer = setInterval(this.updateVertices, 100);\r\n    }\r\n\r\n    onChangeNodes(e) {\r\n\r\n        var nodes = e.target.value\r\n        this.setState({ [e.target.name]: nodes })\r\n        var data = []\r\n\r\n        for (var i = 0; i < nodes; i++) {\r\n            var num1 = Math.floor(Math.random() * this.state.width) + 50\r\n            var num2 = Math.floor(Math.random() * this.state.height) + 50\r\n            var node_data = {\r\n                x: num1,\r\n                y: num2,\r\n                color: \"green\"\r\n            }\r\n            data.push(node_data)\r\n        }\r\n        this.setState({ vertices: data })\r\n    }\r\n\r\n    onChangeActive(e) {\r\n        var nodes = e.target.value\r\n        this.setState({ [e.target.name]: nodes })\r\n        var vertices = this.state.vertices;\r\n        for (var i = 0; i < nodes; i++) {\r\n            vertices[i].color = \"red\"\r\n        }\r\n        this.setState({ vertices: vertices });\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    OnSimulate() {\r\n\r\n        var cnt = this.state.count;\r\n        if (cnt % 2 === 0) {\r\n            this.startInterval();\r\n        }\r\n        else {\r\n            clearInterval(this.timer);\r\n        }\r\n\r\n        cnt += 1\r\n        this.setState({ count: cnt })\r\n    }\r\n\r\n    updateVertices() {\r\n\r\n        var vertices = this.state.vertices;\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            var randm = Math.random() * 10\r\n            var jump1 = Math.floor(randm)\r\n            randm = Math.random() * 10\r\n            var jump2 = Math.floor(randm)\r\n            randm = Math.random() * 4\r\n            randm = Math.floor(randm)\r\n        \r\n            if (randm === 0) {\r\n                if (vertices[i].x < this.state.width + 50)\r\n                    vertices[i].x += jump1\r\n                if (vertices[i].y < this.state.height + 50)\r\n                    vertices[i].y += jump2\r\n            }\r\n            else if (randm === 1) {\r\n                if (vertices[i].x < this.state.width + 50)\r\n                    vertices[i].x += jump1\r\n                if (vertices[i].y > 50)\r\n                    vertices[i].y -= jump2\r\n            }\r\n            else if (randm === 2) {\r\n                if (vertices[i].x > 50)\r\n                    vertices[i].x -= jump1\r\n                if (vertices[i].y < this.state.height + 50)\r\n                    vertices[i].y += jump2\r\n            }\r\n            else {\r\n                if (vertices[i].x > 50)\r\n                    vertices[i].x -= jump1\r\n                if (vertices[i].y > 50)\r\n                    vertices[i].y -= jump1\r\n            }\r\n        }\r\n\r\n        this.setState({ vertices: vertices })\r\n        this.updateEdges()\r\n    }\r\n\r\n    updateEdges() {\r\n        var vertices = this.state.vertices;\r\n        var edges = [];\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            if (vertices[i].color !== \"green\") {\r\n                for (var j = 0; j < vertices.length; j++) {\r\n                    if (vertices[j].color !== \"red\") {\r\n                        if (Math.abs(vertices[i].x - vertices[j].x) * Math.abs(vertices[i].x - vertices[j].x) + Math.abs(vertices[i].y - vertices[j].y) * Math.abs(vertices[i].y - vertices[j].y) <= this.state.dist) {\r\n                            var prob = Math.floor(Math.random() * 5);\r\n                            if(this.state.beta>=prob){\r\n                                var edge = {\r\n                                    v: i,\r\n                                    u: j\r\n                                }\r\n                                vertices[j].color = \"yellow\";\r\n                                edges.push(edge)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (vertices[i].color === \"yellow\") {\r\n                    prob = Math.floor(Math.random() * 100);\r\n                    if (this.state.gamma > prob) {\r\n                        vertices[i].color = \"blue\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.setState({ edges: edges });\r\n    }\r\n\r\n    render() {\r\n\r\n        const parameterCss = {\r\n            height: \"70vh\",\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            borderRadius: \"10px\",\r\n            position: \"fixed\",\r\n            width: \"25%\"\r\n        }\r\n\r\n        const infoCss = {\r\n            top : \"79vh\",\r\n            height: \"20vh\",\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            borderRadius: \"10px\",\r\n            position: \"fixed\",\r\n            width: \"25%\"\r\n        }\r\n\r\n        const simulatorCss = {\r\n            minHeight: \"91vh\",\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            borderRadius: \"10px\",\r\n            left: \"27%\",\r\n            width: \"72%\",\r\n            position: \"fixed\"\r\n        }\r\n\r\n        const inputCss = {\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            height: \"30px\",\r\n            width : \"75%\"\r\n        }\r\n\r\n        const {vertices} = this.state\r\n\r\n        return (\r\n            <div className = \"covid my-2 ml-3\">\r\n                <div className = \"parameter \" style = {parameterCss}>\r\n                    <div style={{ color: \"#a2c48d\", fontSize: \"25px\", textAlign: \"center\" }}>\r\n                        Input parameters\r\n                    </div>  \r\n                    <div className=\"body\" style={{ color: \"#996560\", fontSize: \"17px\", fontWeight: \"600\", padding: \"20px\" }}>   \r\n                        <div className=\"form-group\" >\r\n                            <label > Total number of nodes</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"total_nodes\"\r\n                                required\r\n                                value={this.state.total_nodes}\r\n                                onChange={this.onChangeNodes}\r\n                                style={inputCss}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label >Total infected nodes</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"active_nodes\"\r\n                                required\r\n                                value={this.state.active_nodes}\r\n                                onChange={(e) => this.onChangeActive(e)}\r\n                                style={inputCss}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\" >\r\n                            <label >Beta (Conversion to Susceptible)</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"beta\"\r\n                                required\r\n                                value={this.state.beta}\r\n                                onChange={(e) => this.onChange(e)}\r\n                                style={inputCss}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Gamma (Conversion to Recoverable)</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"gamma\"\r\n                                required\r\n                                value={this.state.gamma}\r\n                                onChange={(e) => this.onChange(e)}\r\n                                style={inputCss}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"btn\" style={{\r\n                                backgroundColor: \"#f8fcf5\",\r\n                                color: \"black\",\r\n                                width: \"75%\",\r\n                                fontSize: \"15px\",\r\n                            }}\r\n                                onClick={() => window.location.reload()}\r\n                            >\r\n                                Clear board\r\n                            </button>\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"btn\" style={{\r\n                                backgroundColor: \"#effce8\",\r\n                                color: \"black\",\r\n                                width: \"90%\",\r\n                                marginTop : \"20px\",\r\n                                borderRadius: \"0px 20px 20px 0px\"\r\n                            }}\r\n                                onClick={() => this.OnSimulate()}\r\n                            >\r\n                                Simulate / Stop\r\n                            </button>\r\n                        </div>      \r\n                    </div> \r\n                </div>\r\n                <div className=\"info\" style={infoCss}>\r\n                    <div style={{ color: \"#a2c48d\", fontSize: \"20px\", textAlign: \"center\" }}>\r\n                        Color assigned\r\n                    </div>\r\n                    <div style={{\r\n                        width: \"90%\",\r\n                        paddingLeft: \"20px\",\r\n                        paddingRight : \"20px\",\r\n                        color: \"#733f2c\",\r\n                        fontSize : \"18px\",\r\n                    }}>\r\n                        Unexposed :  <span style = {{color : \"green\", fontWeight : \"bold\", float : \"right\"}}>Green</span><br/> \r\n                        Infected : <span style={{ color: \"red\", fontWeight: \"bold\",float: \"right\" }}>Red</span><br /> \r\n                        Susceptible : <span style={{ color: \"yellow\", fontWeight: \"bold\", float: \"right\" }}>Yellow</span><br /> \r\n                        Recovered :  <span style={{ color: \"blue\", fontWeight: \"bold\", float: \"right\" }}>Blue</span><br /> \r\n                    </div>\r\n                </div>\r\n                <div className = \"simulator\" style = {simulatorCss}>\r\n                    <div style={{ color: \"#a2c48d\", fontSize: \"25px\", textAlign: \"center\" }}>\r\n                        Simulation\r\n                    </div>\r\n                    <svg width=\"100%\" height=\"80vh\">\r\n                        {this.state.edges ? (\r\n                            this.state.edges.map((data, index) => (\r\n                                <line key={`\"edge\"${index}`} x1={vertices[data.v].x} y1={vertices[data.v].y} x2={vertices[data.u].x} y2={vertices[data.u].y}\r\n                                    style={{ stroke: \"grey\", strokeWidth: 1, zIndex: 1 }}\r\n                                />\r\n                            ))\r\n                        ) : ''}\r\n                        {vertices ? (\r\n                            vertices.map((data, index) => (\r\n                                <>\r\n                                    <circle className=\"circle\" key={`\"node\"${index}`} cx={data.x} cy={data.y} r=\"3\" fill={data.color} />\r\n                                </>\r\n                            ))\r\n                        ) : ''}\r\n                    </svg>  \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Covid;","import React, { PureComponent } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport Navbar from \"./components/navbar\";\r\nimport Home from \"./components/home\";\r\nimport Visualiser from \"./components/visualiser\";\r\nimport Finder from \"./components/finder\";\r\nimport Covid from \"./components/covid\";\r\nimport Game from \"./components/game\";\r\n\r\nclass App extends PureComponent {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Navbar />\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/visualiser\" component={Visualiser} />\r\n          <Route exact path=\"/path_finder\" component={Finder} />\r\n          <Route exact path=\"/covid_simulation\" component={Covid} />\r\n          {/* <Route exact path=\"/game_coloring\" component={Game} /> */}\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React, {Component} from 'react'\r\n\r\nclass Game extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            total_nodes : '',\r\n            total_edges : '',\r\n            starting_node : '',\r\n            vertices : [],\r\n            edges : [],\r\n            graph : [],\r\n            height: 550,\r\n            width: 1000,\r\n            algorithm : '', \r\n            speed : 1000,\r\n            count : 0,\r\n            errors: {},\r\n            graphColourState: \"blue\"\r\n        }\r\n        this.onChangeNodes = this.onChangeNodes.bind(this)\r\n        this.onChangeEdges = this.onChangeEdges.bind(this)\r\n        this.vertexClick = this.vertexClick.bind(this)\r\n        this.changeGraphColour= this.changeGraphColour.bind(this)\r\n        this.sleep = this.sleep.bind(this)\r\n        this.checkcolour=this.checkcolour.bind(this)\r\n    }\r\n\r\n    onChangeNodes(e) {\r\n        var nodes = e.target.value\r\n        this.setState({ [e.target.name]: nodes })\r\n        var data = []\r\n        var graphdata=[]\r\n        for (var j = 0 ;j<this.state.total_nodes;j++){\r\n            graphdata.push([])\r\n        }\r\n        for (var j = 0 ;j<this.state.total_nodes;j++){\r\n            graphdata[j].push([])\r\n        }\r\n        for (var i = 0; i < nodes; i++) {\r\n            var num1 = Math.floor(Math.random() * this.state.width) + 50\r\n            var num2 = Math.floor(Math.random() * this.state.height) + 50\r\n            var node_data = {\r\n                x: num1,\r\n                y: num2,\r\n                color: \"blue\",\r\n                adjacent_nodes : []\r\n            }\r\n            data.push(node_data)\r\n        }\r\n        this.setState({ vertices: data })\r\n        this.setState({graph : graphdata})\r\n        this.setState({edges : []})\r\n    }\r\n    checkcolour(e)\r\n    {\r\n        var mark=0\r\n        console.log(this.state.graph)\r\n        console.log(this.state.vertices)\r\n            for (var j = 0 ;j<this.state.vertices.length;j++){\r\n                    var current_node_colour=this.state.vertices[j].color\r\n                    \r\n                    for(var k=0;k<this.state.graph[j].length;k++)\r\n                    {\r\n                        var neigh_colour=this.state.vertices[this.state.graph[j][k]].color\r\n                        if(current_node_colour == neigh_colour)\r\n                        {\r\n                            mark=1;\r\n                            return;\r\n\r\n                        }\r\n                        \r\n                    }\r\n                    \r\n                    \r\n            }\r\n            if(mark==0)\r\n            {\r\n                alert('Game Complete ')\r\n                return ;\r\n            }\r\n    }\r\n   async vertexClick(e)\r\n    {\r\n        \r\n        var x_coord=e.target.getAttribute(\"cx\")\r\n        var y_coord=e.target.getAttribute(\"cy\")\r\n        x_coord= parseInt(x_coord)\r\n\r\n        y_coord=parseInt(y_coord)\r\n\r\n        await this.setState(state => {\r\n                return state.vertices.map((item, index) => {\r\n                    \r\n                    if (x_coord === item.x && y_coord === item.y) {\r\n                        item.color = this.state.changeGraphColour\r\n                        \r\n                        return item;\r\n                    } \r\n                    else{\r\n                        return item;\r\n                    }\r\n                });\r\n            });\r\n            this.checkcolour();\r\n    }\r\n    changeGraphColour(e)\r\n    {\r\n        \r\n        var colour=e.target.getAttribute(\"value\")\r\n        this.state.changeGraphColour=colour\r\n\r\n    }\r\n    onChangeEdges(e){\r\n        var total_edges = e.target.value\r\n        var nodes = this.state.total_nodes\r\n        if(2*total_edges > (nodes * (nodes-1))){\r\n            alert('Edges can not be greater than (n * n+1) / 2')\r\n            return ;\r\n        }\r\n        this.setState({ [e.target.name]: total_edges })\r\n        var set = new Set()\r\n\r\n        var edges = []\r\n        var data = []\r\n        for (var j = 0 ;j<this.state.total_nodes;j++){\r\n            data.push([])\r\n        }\r\n        for (var i = 0; i < total_edges; i++) {\r\n\r\n            var num1 = Math.floor(Math.random() * this.state.total_nodes)\r\n            var num2 = Math.floor(Math.random() * this.state.total_nodes)\r\n\r\n            var str1 = num1.toString() + '#' + num2.toString()   \r\n            var str2 = num2.toString() + '#' + num1.toString() \r\n\r\n            if(set.has(str1) || set.has(str2) || num1 === num2){\r\n                i-=1\r\n            }\r\n            else{\r\n                set.add(str1)\r\n                data[num1].push(num2)\r\n                data[num2].push(num1)\r\n                edges.push({\r\n                    u:num1,\r\n                    v:num2,\r\n                    color : \"yellow\"\r\n                })\r\n            }\r\n        }\r\n\r\n        this.setState({edges : edges})\r\n        this.setState({graph : data})\r\n    }\r\n\r\n    onChange(e){\r\n        \r\n        this.setState({[e.target.name] : e.target.value})\r\n    }\r\n\r\n    \r\n\r\n    startInterval() {\r\n        this.timer = setInterval(()=>this.traceEdge(), this.state.traceSpeed);\r\n    }\r\n\r\n    traceEdge(){\r\n        console.log(\"hi\");\r\n    }\r\n\r\n    \r\n    sleep = () => {\r\n        return new Promise(resolve => setTimeout(resolve, this.state.speed))\r\n    }\r\n\r\n    render() {\r\n        const parameterCss = {\r\n            height: \"70vh\",\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            borderRadius: \"10px\",\r\n            position: \"fixed\",\r\n            width: \"25%\"\r\n        }\r\n\r\n        const infoCss = {\r\n            top: \"79vh\",\r\n            height: \"20vh\",\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            borderRadius: \"10px\",\r\n            position: \"fixed\",\r\n            width: \"25%\"\r\n        }\r\n\r\n        const simulatorCss = {\r\n            minHeight: \"91vh\",\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            borderRadius: \"10px\",\r\n            left: \"27%\",\r\n            width: \"72%\",\r\n            position: \"fixed\"\r\n        }\r\n\r\n        const inputCss = {\r\n            border: \"1px solid #a2c48d\",\r\n            boxShadow: \"2px 2px 3px #bfbfbf\",\r\n            height: \"30px\",\r\n            width: \"75%\",\r\n            fontSize : \"13px\"\r\n        }\r\n\r\n        const {vertices} = this.state\r\n\r\n        return (\r\n            <div className=\"visualiser my-2 ml-3\">\r\n                <div className=\"parameter\" style={parameterCss}>\r\n                <div style={{ color: \"#a2c48d\", fontSize: \"25px\", textAlign: \"center\" }}>\r\n                        Instructions\r\n                    </div>\r\n                <div style={{  fontSize: \"20px\", textAlign: \"center\" }}>\r\n                    Colour all the nodes such that they have different colour from their neighbours\r\n                    </div>\r\n                    <div style={{ color: \"#a2c48d\", fontSize: \"25px\", textAlign: \"center\" }}>\r\n                        Input parameters\r\n                    </div>\r\n                    <form validate=\"true\" onSubmit={this.OnSimulate} style={{ color: \"#996560\", fontSize: \"17px\", fontWeight: \"600\", padding: \"20px\" }}>   \r\n                        <div className=\"form-group\" >\r\n                            <label > Total number of nodes</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"total_nodes\"\r\n                                required\r\n                                value={this.state.total_nodes}\r\n                                onChange={this.onChangeNodes}\r\n                                style={inputCss}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label >Total number of edges</label>\r\n                            <input\r\n                                type=\"number\"\r\n                                className=\"form-control\"\r\n                                name=\"total_edges\"\r\n                                required\r\n                                value={this.state.total_edges}\r\n                                onChange={this.onChangeEdges}\r\n                                style={inputCss}\r\n                            />\r\n                        </div>\r\n\r\n\r\n                        \r\n                        <div>\r\n                            <button className=\"btn\" style={{\r\n                                    backgroundColor: \"#effce8\",\r\n                                    color: \"black\",\r\n                                    width: \"90%\",\r\n                                    marginTop : \"30px\",\r\n                                    borderRadius: \"0px 20px 20px 0px\"\r\n                                }}\r\n                                type = \"submit\"\r\n                            >\r\n                                Play \r\n                            </button>\r\n                        </div>      \r\n                    </form> \r\n                </div>\r\n                <div className=\"info\" style={infoCss}>\r\n                <label > Choose Colour</label>\r\n                            <form action=\"\" method=\"post\">\r\n                            <input id=\"redbutton\" type=\"radio\" name=\"radio\" value=\"red\" onClick={this.changeGraphColour} /> Red\r\n                            <input id=\"bluebutton\" type=\"radio\" name=\"radio\" value=\"blue\" onClick={this.changeGraphColour} /> Blue\r\n                            <input id=\"greenbutton\" type=\"radio\" name=\"radio\" value=\"green\" onClick={this.changeGraphColour}  /> Green\r\n                            <input id=\"blackbutton\" type=\"radio\" name=\"radio\" value=\"black\" onClick={this.changeGraphColour}     /> Black\r\n                            </form>\r\n                </div>\r\n                <div className=\"simulator\" style={simulatorCss}>\r\n                    <div style={{ color: \"#a2c48d\", fontSize: \"25px\", textAlign: \"center\" }}>\r\n                        Graph Colour Game\r\n                    </div>\r\n                    <svg width=\"100%\" height=\"80vh\">\r\n                        {this.state.edges ? (\r\n                            this.state.edges.map((data, index) => (\r\n                                <line x1={vertices[data.v].x} y1={vertices[data.v].y} x2={vertices[data.u].x} y2={vertices[data.u].y}\r\n                                    style={{ stroke: data.color, strokeWidth: 4, zIndex: 1 }}\r\n                                />\r\n                            ))\r\n                        ) : ''}\r\n\r\n                        {vertices ? (\r\n                            vertices.map((data, index) => (\r\n                                <>\r\n                                <circle className=\"circle\" key={index} cx={data.x} cy={data.y}\r\n                                 r=\"17\" fill={data.color}  onClick={this.vertexClick} \r\n                                />\r\n                                    <text x={data.x - 7} y={data.y+8} fill=\"white\" style = {{fontWeight : \"bold\", fontSize : \"20px\"}}>{index}</text>\r\n                                </>\r\n                            ))\r\n                        ) : ''}\r\n\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}